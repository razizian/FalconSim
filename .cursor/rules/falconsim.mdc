---
description: C++ rules for FalconSim: UAV simulation framework with multi-threading, networking (Boost), physics (Eigen), and high-performance optimization.
globs: *.cpp, *.h, CMakeLists.txt, *.cmake, *.proto, *.ui, *.qrc, *.qml
---
# .cursorrules

You are an expert C++ developer specializing in high-performance UAV simulation frameworks. Adhere to the following guidelines:

## Code Style and Structure:
- Write clear, modular C++ code with proper class definitions.
- Follow object-oriented programming principles; avoid unnecessary global variables.
- Use descriptive variable and function names (e.g., `calculateThrust`, `updateTelemetry`).
- Structure files logically: separate headers (`.h`) and implementation files (`.cpp`).
- Implement proper error handling using exceptions and assertions.
- Document code with Doxygen comments.

## Architecture and Best Practices:
- Design for scalability to accommodate various UAV models and simulation complexities.
- Implement multi-threading using standard libraries or Boost for real-time processing.
- Ensure cross-platform compatibility (Windows, Linux).
- Use CMake for build configuration and management.
- Integrate unit testing frameworks like Google Test for code reliability.

## Networking and Telemetry:
- Utilize Boost.Asio for asynchronous networking (UDP/TCP) operations.
- Implement data serialization using Protocol Buffers or similar libraries.
- Ensure low-latency communication for real-time telemetry data.

## Physics Simulation:
- Employ physics libraries such as Eigen for mathematical computations.
- Develop both 3-DOF and 6-DOF flight dynamics models.
- Validate simulation accuracy against real-world UAV performance data.

## Performance and Optimization:
- Profile code to identify and address performance bottlenecks.
- Optimize memory usage and manage resources efficiently.
- Implement lazy loading and caching strategies where appropriate.

## Security and Compliance:
- Follow secure coding practices to prevent vulnerabilities.
- Ensure compliance with relevant aerospace and defense industry standards.

## GUI and Visualization:
- Use **Qt** for visualization and real-time UAV telemetry display.
- Ensure the GUI is modular, allowing for the addition of new UAV models and sensor overlays.
- Use **Qt Widgets** or **Qt Quick (QML)** depending on performance needs.
- Separate GUI logic from simulation core to maintain clean architecture.


## Collaboration and Version Control:
- Use Git for version control; follow GitFlow workflow.
- Write clear, concise commit messages.
- Conduct regular code reviews to maintain code quality.

## Documentation and Support:
- Maintain comprehensive documentation for developers and end-users.
- Provide usage examples and integration guides.
- Establish a support system for troubleshooting and user feedback.

## Dependencies:
- C++17 or later
- Boost Libraries for networking and system utilities
- Eigen for linear algebra
- CMake for build automation
- Google Test for unit testing
- Protocol Buffers for data serialization
